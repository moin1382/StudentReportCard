#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct students
{
    long long int id;
    char name[50];
    float marks;
    char grade;
    struct students *next;


}*student;


//code for implementation Stack in this project ****
struct stack {
    int arr[MAX_SIZE];
    int top;
};

void initializeStack(struct stack* s) {
    s->top = -1;
}

int isStackEmpty(struct stack* s) {
    return (s->top == -1);
}

int isStackFull(struct stack* s) {
    return (s->top == MAX_SIZE - 1);
}

void push(struct stack* s, int data) {
    if (isStackFull(s)) {
        printf("Stack is Empty\n");
        return;
    }

    s->arr[++(s->top)] = data;
}

int pop(struct stack* s) {
    if (isStackEmpty(s)) {
        printf("Stack is Empty\n");
        return -1;
    }

    return s->arr[(s->top)--];
}

void stackImplement() {
    struct stack s;
    initializeStack(&s);

    int choice, data;

    while (1) {
        printf("\nStack Implementation Menu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &data);
                push(&s, data);
                break;
            case 2:
                data = pop(&s);
                if (data != -1) {
                    printf("Popped element: %d\n", data);
                }
                break;
            case 3:
                printf("Exiting from stack implementation\n");
                return;
            default:
                printf("Invalid choice\n");
                break;
        }
    }
}

//queue implementation *****


struct queue {
    int arr[MAX_SIZE];
    int front, rear;
};

void initializeQueue(struct queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isQueueEmpty(struct queue* q) {
    return (q->front == -1 && q->rear == -1);
}

int isQueueFull(struct queue* q) {
    return ((q->rear + 1) % MAX_SIZE == q->front);
}

void enqueue(struct queue* q, int data) {
    if (isQueueFull(q)) {
        printf("Queue Overflow\n");
        return;
    }

    if (isQueueEmpty(q)) {
        q->front = 0;
        q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % MAX_SIZE;
    }

    q->arr[q->rear] = data;
}

int dequeue(struct queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue is Empty\n");
        return -1;
    }

    int data = q->arr[q->front];

    if (q->front == q->rear) {
        q->front = -1;
        q->rear = -1;
    } else {
        q->front = (q->front + 1) % MAX_SIZE;
    }

    return data;
}

void queueImplement() {
    struct queue q;
    initializeQueue(&q);

    int choice, data;

    while (1) {
        printf("\nQueue Implementation Menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &data);
                enqueue(&q, data);
                break;
            case 2:
                data = dequeue(&q);
                if (data != -1) {
                    printf("Dequeued element: %d\n", data);
                }
                break;
            case 3:
                printf("Exiting from queue implementation\n");
                return;
            default:
                printf("Invalid choice\n");
                break;
        }
    }
}


//all function call first....
void createstudentReport(int n);
void displayStudent();
void displaySpecificStudent(long long int id);
void deleteStudentRecord(long long int id);
void modifyStudentRecordbyId(long long int id);
void displayAllStudentGradeReport();
void addNewStudent(int n);


int main()
{
    int n,choice;
    long long int id;
    printf("\t\t\t###########################################################################");
    printf("\n\t\t\t############                                                   ############");
    printf("\n\t\t\t############   Student Record Management System Project in C   ############");
    printf("\n\t\t\t############        Daffodil International University          ############");
    printf("\n\t\t\t############                Section 63_E                       ############");
    printf("\n\t\t\t############       Id: 1245,1002,1382,1241,1155                ############");
    printf("\n\t\t\t###########################################################################");

    while(1)
    {
        printf("\n1. --Create new student report--");
        printf("\n2. --Display student report--");
        printf("\n3. --Display specific student report--");
        printf("\n4. --For delete student record--");
        printf("\n5. --To modify Student Report--");
        printf("\n6. --Display All Student Grade Report--");
        printf("\n7. --Add New Student to list--");
        printf("\n8. --Stack Implementation--");
        printf("\n9. --Queue Implementation--");
        printf("\n10. --Exit from Program--");
        printf("\n\nEnter your Choice: ");

        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("\n\nHow much student you want create: "); // for how much student user want create
            scanf("%d",&n);//for scan student no
            createstudentReport(n);//call create student function
            break;
        case 2:
            //for displaying student report
            displayStudent();
            break;
        case 3:
            //for displaying specific student report
            printf("Enter id to show specific student report: ");
            scanf("%lld",&id);
            displaySpecificStudent(id);
            break;
        case 4:
            //for delete student record by id
            printf("Enter id to delete student record: ");
            scanf("%lld",&id);
            deleteStudentRecord(id);
            break;
        case 5:
            //for editing student record
            printf("Enter id to edit/modify student record: ");
            scanf("%lld",&id);
            modifyStudentRecordbyId(id);
            break;
        case 6:
            //for editing student record
            displayAllStudentGradeReport();
            break;
        case 7:
            //for adding new student in list
            printf("\nHow much student you want add: ");
            scanf("%d",&n);
            addNewStudent(n);
            break;
        case 8:
            //stack
            stackImplement();
            break;
        case 9:
            //stack
            queueImplement();
            break;
        case 10:
            //for exit program
            exit(0);
            break;
        default:
            printf("\n\tWrong choice please choice again\n");

        }
    }


    return 0;
}

//for create student report

void createstudentReport(int n)
{
    struct students *temp, *newNode;
    int i;

    student = (struct students*)malloc(sizeof(struct students));
    if (student == NULL)
    {
        printf("Memory allocation failed.\n");
        return;
    }

    // Prompt the user to enter student details
    printf("\nEnter details for student 1:\n");
    printf("ID: ");
    scanf("%lld", &student->id);
    printf("Name: ");
    scanf(" %[^\n]s", student->name);  // Modified to scan the full name with spaces
    printf("Marks: ");
    scanf("%f", &student->marks);

    if (student->marks >= 90)
        student->grade = 'A';
    else if (student->marks >= 80)
        student->grade = 'B';
    else if (student->marks >= 70)
        student->grade = 'C';
    else if (student->marks >= 60)
        student->grade = 'D';
    else
        student->grade = 'F';

    student->next = NULL;
    temp = student;

    // Create remaining student records
    for (i = 2; i <= n; i++)
    {
        newNode = (struct students *)malloc(sizeof(struct students));
        if (newNode == NULL)
        {
            printf("Memory allocation failed.\n");
            return;
        }

        printf("\nEnter details for student %d:\n", i);
        printf("ID: ");
        scanf("%lld", &newNode->id);
        printf("Name: ");
        scanf(" %[^\n]s", newNode->name);  // Modified to scan the full name with spaces
        printf("Marks: ");
        scanf("%f", &newNode->marks);

        if (newNode->marks >= 90)
        {
            newNode->grade = 'A';
        }
        else if (newNode->marks >= 80)
        {
            newNode->grade = 'B';
        }
        else if (newNode->marks >= 70)
        {
            newNode->grade = 'C';
        }
        else if (newNode->marks >= 60)
        {
            newNode->grade = 'D';
        }
        else
        {
            newNode->grade = 'F';
        }

        newNode->next = NULL;
        temp->next = newNode;
        temp = temp->next;
    }

    printf("\nStudent report created successfully!\n");
}


//for display student record
void displayStudent()
{
    struct students *temp = student;
    int count = 1;

    if (temp == NULL)
    {
        printf("No student records found.\n");
        return;
    }

    printf("\n--- All Student Data ---\n");
    while (temp != NULL)
    {
        printf("\nStudent %d:\n", count);
        printf("ID: %lld\n", temp->id);

        printf("Name: %s\n", temp->name);
        printf("Marks: %.2f\n", temp->marks);
        printf("Grade: %c\n", temp->grade);

        temp = temp->next;
        count++;
    }
}


void displaySpecificStudent(long long int id)
{
    struct students *temp = student;
    int found = 0;

    while (temp != NULL)
    {
        if (temp->id == id)
        {
            printf("\n--- Student Report ---\n");
            printf("ID: %lld\n", temp->id);
            printf("Name: %s\n", temp->name);
            printf("Marks: %.2f\n", temp->marks);
            printf("Grade: %c\n", temp->grade);
            found = 1;
            break;
        }
        temp = temp->next;
    }

    if (!found)
    {
        printf("Student with ID %lld not found.\n", id);
    }
}

void deleteStudentRecord(long long int id)
{
    struct students *current = student;
    struct students *previous = NULL;
    int found = 0;

    // Check if the first student record needs to be deleted
    if (current != NULL && current->id == id)
    {
        student = current->next;
        free(current);
        found = 1;
        printf("Student record with ID %lld deleted successfully.\n", id);
        return;
    }

    // Search for the student record with the given ID
    while (current != NULL)
    {
        if (current->id == id)
        {
            found = 1;
            break;
        }
        previous = current;
        current = current->next;
    }

    // If the student record is found, delete it
    if (found)
    {
        previous->next = current->next;
        free(current);
        printf("Student record with ID %lld deleted successfully.\n", id);
    }
    else
    {
        printf("Student record with ID %lld not found.\n", id);
    }
}

void modifyStudentRecordbyId(long long int id)
{
    struct students *temp = student;
    int found = 0;
    int choice;
    int c; // variable to clear the input buffer

    while (temp != NULL)
    {
        if (temp->id == id)
        {
            found = 1;

            printf("\n--- Modify Student Record ---\n");
            printf("1. --For change name--\n");
            printf("2. --For change Marks--\n");
            printf("Enter what you want to modify: ");
            scanf("%d", &choice);

            switch (choice)
            {
            case 1:
                printf("Current Name: %s\n", temp->name);
                printf("Enter new Name: ");
                scanf(" %[^\n]s", temp->name);  // Modified to scan the full name with spaces

                // Clear the input buffer
                while ((c = getchar()) != '\n' && c != EOF);

                break;
            case 2:
                printf("Current Marks: %.2f\n", temp->marks);
                printf("Enter new Marks: ");
                scanf("%f", &temp->marks);

                if (temp->marks >= 90)
                    temp->grade = 'A';
                else if (temp->marks >= 80)
                    temp->grade = 'B';
                else if (temp->marks >= 70)
                    temp->grade = 'C';
                else if (temp->marks >= 60)
                    temp->grade = 'D';
                else
                    temp->grade = 'F';

                break;
            }

            printf("Student record with ID %lld modified successfully.\n", id);
            break;
        }
        temp = temp->next;
    }

    if (!found)
    {
        printf("Student with ID %lld not found.\n", id);
    }
}


void addNewStudent(int n)
{
    if (student == NULL)
    {
        printf("Student list is empty.\n");
        return;
    }

    struct students *temp = student;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }

    for (int i = 0; i < n; i++)
    {
        struct students *newNode = (struct students *)malloc(sizeof(struct students));
        if (newNode == NULL)
        {
            printf("Memory allocation failed.\n");
            return;
        }

        printf("\nEnter details for student %d:\n", i + 1);
        printf("ID: ");
        scanf("%lld", &newNode->id);
        printf("Name: ");
        scanf(" %[^\n]s", newNode->name);
        printf("Marks: ");
        scanf("%f", &newNode->marks);

        if (newNode->marks >= 90)
            newNode->grade = 'A';
        else if (newNode->marks >= 80)
            newNode->grade = 'B';
        else if (newNode->marks >= 70)
            newNode->grade = 'C';
        else if (newNode->marks >= 60)
            newNode->grade = 'D';
        else
            newNode->grade = 'F';

        newNode->next = NULL;
        temp->next = newNode;
        temp = temp->next;
    }

    printf("\nNew student(s) added successfully!\n");
}




void displayAllStudentGradeReport()
{
    struct students *temp = student;

    printf("\n--- All Student Grade Report ---\n");
    while (temp != NULL)
    {
        printf("[%lld][%c]\n", temp->id, temp->grade);
        temp = temp->next;
    }
}



//stack implementation
